-
  In order to test account transaction I create a new transaction
-
  !python {model: project.task}: |
    proxy = self.pool.get('ir.model.data')
    task = proxy.get_object(cr, uid, 'project', 'project_task_5')
    self.write(cr, uid, [task.id], {'assigned_partner_id': ref('base.res_partner_main1')})
-
  !assert {model: project.task, id: project.project_task_5}:
    - assigned_partner_id.id == ref('base.res_partner_main1')
-
  I check that we can create an announcement from a task easily with the create marketplace button
-
  !context
    uid: 'base_community.user_roger'
-
  !record {model: marketplace.announcement, id: announcement_test_2}:
    name: I'm offering services about Odoo Customization
    type: offer
    description: This include python development, formation, helpdesk, but not frontend development on Odoo CMS
    category_id: marketplace.category_odoo
    tag_ids:
      - marketplace.tag_odoo_python
      - marketplace.tag_odoo_formation
      - marketplace.tag_odoo_helpdesk
    partner_id: base.res_partner_main2
    infinite_qty: 1
    uom_id: product.product_uom_hour
    currency_ids:
      - model: "marketplace.announcement"
        field: "currency_ids"
        price_unit: 50
        currency_id: account_wallet.COM
-
  I check Mark can publish the announcement
-
  !python {model: marketplace.announcement}: |
    from openerp import workflow
    workflow.trg_validate(uid, 'marketplace.announcement', ref('announcement_test_2'), 'announcement_draft_open', cr)
-
  !assert {model: marketplace.announcement, id: announcement_test_2, string: "Roger wasn't able to publish the announcement!"}:
    - state == 'open'
-
  I make Roger create a proposition for the announcement
-
  !context
    uid: 'base_community.user_mark'
-
  !record {model: marketplace.proposition, id: proposition_test_2}:
    announcement_id: announcement_test_2
    description: I need your help
    sender_id: base.res_partner_main1
    quantity: 1
    task_want_id: project.project_task_5
    currency_ids:
      - model: "account.wallet.transaction"
        field: "currency_ids"
        price_unit: 50
        currency_id: account_wallet.COM
-
  !python {model: marketplace.proposition}: |
    from openerp import workflow
    workflow.trg_validate(uid, 'marketplace.proposition', ref('proposition_test_2'), 'proposition_draft_open', cr)
-
  !assert {model: marketplace.proposition, id: proposition_test_2, string: "Mark wasn't able to publish the proposition!"}:
    - state == 'open'
-
  I check that Roger can accept it
-
  !context
    uid: 'base_community.user_roger'
-
  !python {model: marketplace.proposition}: |
    from openerp import workflow
    workflow.trg_validate(uid, 'marketplace.proposition', ref('proposition_test_2'), 'proposition_open_accepted', cr)
-
  !context
    uid: 'base.user_root'
-
  !assert {model: marketplace.proposition, id: proposition_test_2, string: "There is error in the task created by the proposition!"}:
    - state == 'accepted'
    - task_id != False
    - task_id.proposition_id.id == ref('proposition_test_2')
    - task_id.assigned_partner_id.id == ref('base.res_partner_main2')
    - task_id.user_id.id == ref('base_community.user_roger')
    - task_id.reviewer_partner_id.id == ref('base.res_partner_main1')
    - task_id.reviewer_id.id == ref('base_community.user_mark')
-
  !python {model: marketplace.proposition}: |
    proxy = self.pool.get('ir.model.data')
    proposition = proxy.get_object(cr, uid, 'project_marketplace', 'proposition_test_2')
    ok = False
    for parent in proposition.task_id.parent_ids:
        if parent.id == ref('project.project_task_5'):
            ok = True
    assert (ok), "The created task wasn't linked to the original task!"
-
  I check that the task assignment configuration is correct
-
  !python {model: marketplace.proposition}: |
    proxy = self.pool.get('ir.model.data')
    proposition = proxy.get_object(cr, uid, 'project_marketplace', 'proposition_test_1')
    payer = False
    for config in proposition.task_id.assigned_partner_config_result_ids:
        if config.stage_id.id == ref('project.project_tt_specification') and config.marketplace_assignment == 'payer':
            payer = True
        if config.stage_id.id == ref('project.project_tt_development') and config.marketplace_assignment == 'invoicer':
            invoicer = True
    assert (payer and invoicer), "The created task is misconfigured!"
-
  I update the stage of the created task to specification and verify that Mark is correctly assigned to it
-
  !context
    uid: 'base_community.user_roger'
-
  !python {model: project.task}: |
    proxy = self.pool.get('ir.model.data')
    proposition = proxy.get_object(cr, uid, 'project_marketplace', 'proposition_test_1')
    self.write(cr, uid, [proposition.task_id.id], {'stage_id': ref('project.project_tt_specification')})
    assert (proposition.task_id.assigned_partner_id.id == ref('base.res_partner_main1')), "Mark wasn't assigned to the task!"
-
  I update the stage of the created task to development and verify that Roger is correctly assigned to it
-
  !python {model: project.task}: |
    proxy = self.pool.get('ir.model.data')
    proposition = proxy.get_object(cr, uid, 'project_marketplace', 'proposition_test_1')
    self.write(cr, uid, [proposition.task_id.id], {'stage_id': ref('project.project_tt_development')})
    assert (proposition.task_id.assigned_partner_id.id == ref('base.res_partner_main2')), "Roger wasn't assigned to the task!"